package com.ohgiraffers.section02.variable;

public class Application3 {

    public static void main(String[] args) {
        // 2024.08.26 12:50
        // 수업목표. 변수의 명명 규칙에 대해 이해할 수 있다.

        /* 필기
        *   변수의 명명 규칙
        *    1. 컴파일 에러를 발생시키는 규칙
        *    2. 컴파일 에러를 발생시키지는 않지만, 개발자들끼리의 암묵적 규칙
        * */

        // 1. 컴파일 에러를 발생시키는 규칙
        // 1-1. 동일한 범위 내에서 동일한 변수명은 가질 수 없다.

        int age = 20;
//        int age = 30; // 붉은 줄이 발생한다면 컴파일 에러다. 동일한 변수명을 가지고 있어 발생했다.

        // 1-2. 예약어는 사용이 불가능하다.
//        int true = 20; // 예약어는 보통 색이 다르기 때문에 바로 보일 것이다.

        // 1-3. 변수명은 대소문자를 구분한다.
        int AGE = 30;
        int Age = 40; // 위에서 만든 소문자 age와는 서로 다른 변수.
        int True = 50; // 소문자 true는 예약어지만, True는 예약어가 아니라 사용 가능
        int TRUE = 60;

        // 1-4. 변수명은 숫자로 시작할 수 없다.
//        int 1age = 50; // 처음 시작이 숫자가 아니면 된다.
        int age1 = 50;

        // 1-5. 특수기호는 '_'와 '$'만 사용이 가능하다.
//        int sh@op = 20;
        int _age2 = 20; // java에서는 언더바 잘 사용 안함.
        int $hi = 100;


        // =================================================================

        // 2. 에러는 발생시키지 않지만, 개발자들끼리의 암묵적인 규칙
        // 2-1. 변수명의 길이는 제한이 없다. 하지만 적당히 하자.
        // 2-2. 변수명이 합성어(2개 이상의 단어)인 경우 첫 번째 단어는 소문자, 두 번째 시작 단어는 대문자로 시작한다.
        //      예시 : maxPoint / minPoint
        //      이런 방식을 Camel-Case(낙타봉 표기법)라고 부른다. 파이썬에서는 Snake-Case라고, max_point 식으로 사용하곤 한다.
        // 2-3. 변수명을 한글로 지어도 에러는 없다. 하지만 권장하지 않는다.
        // 2-4. 변수 안에 저장된 값이 어떤 의미를 가지는지 명확하게 표현하자.
        // 2-5. 전형적인 변수 이름이 있다면, 가급적 사용하자.
        //      예시 : 합계(sum), 최대값(max), 최솟값(min), 수 샐 때(count, cnt) 등
        // 2-6. 명사형으로 되도록 작성하면 좋다.
        //      예시 : goHome보다는 home
        // 2-7. boolean 형들은 의문문으로 가급적이면 긍정형태로 작성한다.
        //      예시 : boolean isAlive = true;


    }

}
